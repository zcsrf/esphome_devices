substitutions:
  esp_name: ESP Dashboard
  esp_hostname: esp-dashboard 
  run_time: 1min #5min #needs to be as long as needed to get data 
  sleep_time: 50min #15min # normal sleep time
  away_sleep_time: 1h #1h # sleep time when nobody's at home
  night_sleep_time: 1h #6.5h # 1st sleep time after midnight

esphome:
  name: dashboard
  platform: ESP32
  board: esp32dev
  platformio_options:
    board_upload.flash_size: 16MB
    board_upload.maximum_ram_size: 327680
    board_upload.maximum_size: 16777216
    board_build.partitions: "../../../custom_partitions1.csv"
  compile_process_limit: 1
#esp32:
#  board: esp32dev
#  framework:
#    type: arduino

logger:
  #level: VERY_VERBOSE
  tx_buffer_size: 2048

api:
  password: ""

ota:
  password: ""

wifi:
  ssid: "Rede-IOT"
  password: !secret iot_pass
  manual_ip:
    static_ip: 10.200.50.215
    gateway: 10.200.50.1
    subnet: 255.255.255.0
  ap:
    password: "esp-dash"
  fast_connect: true

deep_sleep:
  run_duration: ${run_time} 
  sleep_duration: ${sleep_time}
  id: deep_sleep_1
  wakeup_pin:
    number: GPIO39
    inverted: true
  wakeup_pin_mode: KEEP_AWAKE


spi:
  clk_pin: 18
  mosi_pin: 23

#i2c:
#  sda: 15
#  scl: 14
#  scan: true

#touchscreen:
#  - platform: lilygo_t5_47
#    interrupt_pin: GPIO13
#    on_touch:
#      then:
#        - logger.log:
#            format: "Touch: %d, %d"
#            args: ["touch.x", "touch.y"]

font:
  - file: "Google_Sans_Bold.ttf"
    id: font_name
    size: 40
  - file: "Google_Sans_Bold.ttf"
    id: font_name_34
    size: 34
  - file: "Google_Sans_Medium.ttf"
    id: font_value
    size: 64    
  - file: "Google_Sans_Medium.ttf"
    id: font_footer
    size: 28    

  # https://pictogrammers.github.io/@mdi/font/5.3.45/
  - file: 'materialdesignicons-webfont.ttf'
    id: font_icons
    size: 160
    glyphs:
      - "\U000F0594" # clear-night
      - "\U000F0590" # cloudy
      - "\U000F0595" # partlycloudy
      - "\U000F0591" # fog      
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0596" # pouring
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F067F" # snowy-rainy
      - "\U000F0599" # sunny
      - "\U000F059D" # windy
      - "\U000F059E" # windy-variant
      - "\U000F0F38" # exceptional

  # https://pictogrammers.github.io/@mdi/font/5.3.45/
  - file: 'materialdesignicons-webfont.ttf'
    id: font_icons_90
    size: 90
    glyphs:
      - "\U000F0594" # clear-night
      - "\U000F0590" # cloudy
      - "\U000F0595" # partlycloudy
      - "\U000F0591" # fog      
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0596" # pouring
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F067F" # snowy-rainy
      - "\U000F0599" # sunny
      - "\U000F059D" # windy
      - "\U000F059E" # windy-variant
      - "\U000F0F38" # exceptional

  - file: 'materialdesignicons-webfont.ttf'
    id: font_icons_small
    size: 56
    glyphs:
      - "\U000F059C" # Sunrise
      - "\U000F059B" # Sunset
      - "\U000F10C2" # Temperature High
      - "\U000F10C3" # Temperature Low
      - "\U000F07E4" # CO2
      - "\U000F054B" # umbrella
      - "\U000F13E2" # umbrella-closed
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F0594" # clear-night
      - "\U000F0599" # sunny
      - "\U000F07CA" # fuel
      - "\U000F024A" # flower
      - "\U000F051F" # time-remaining
      - "\U000F140B" # Energy
      - "\U000F0F29" # Frost Alert
      - "\U000F0099" # mdi-bed-outline
      - "\U000F0EF4" # mdi-fishbowl-outline
      - "\U000F156D" # mdi-sofa-outline
      - "\U000F00A3" # mdi-bike
      - "\U000F0B7D" # mdi-cloud-download-outline
      - "\U000F0DF1" # mdi-pi-hole

  - file: 'materialdesignicons-webfont.ttf'
    id: font_icons_50
    size: 50
    glyphs:
      - "\U000F04B2" # sleep
      - "\U000F02DC" # home
      - "\U000F13D7" # not_home
      - "\U000F12A3" # battery-high
      - "\U000F12A2" # battery-medium
      - "\U000F12A1" # battery-low
      - "\U000F008E" # battery-outline
      - "\U000F091F" # mdi-wifi-strength-1
      - "\U000F0922" # mdi-wifi-strength-2
      - "\U000F0925" # mdi-wifi-strength-3
      - "\U000F0928" # mdi-wifi-strength-4
      - "\U000F092F" # mdi-wifi-strength-1
      - "\U000F050F" # mdi-thermometer
      - "\U000F059D" # mdi-weather-windy
      - "\U000F058C" # mdi-water


  - file: 'materialdesignicons-webfont.ttf'
    id: font_icons_tiny
    size: 28
    glyphs:
      - "\U000F04B2" # sleep
      - "\U000F02DC" # home
      - "\U000F13D7" # not_home
      - "\U000F12A3" # battery-high
      - "\U000F12A2" # battery-medium
      - "\U000F12A1" # battery-low
      - "\U000F008E" # battery-outline
      - "\U000F091F" # mdi-wifi-strength-1
      - "\U000F0922" # mdi-wifi-strength-2
      - "\U000F0925" # mdi-wifi-strength-3
      - "\U000F0928" # mdi-wifi-strength-4
      - "\U000F092F" # mdi-wifi-strength-1
  
    #Forecast icons
  - file: 'materialdesignicons-webfont.ttf'
    id: weather_font_140
    size: 140
    glyphs:
      - "\U000F0590" # weather-cloudy
      - "\U000F0F2F" # weather-cloudy-alert
      - "\U000F0E6E" # weather-cloudy-arrow-right
      - "\U000F0591" # weather-fog
      - "\U000F0592" # weather-hail
      - "\U000F0F30" # weather-hazy
      - "\U000F0898" # weather-hurricane
      - "\U000F0593" # weather-lightning
      - "\U000F067E" # weather-lightning-rainy
      - "\U000F0594" # weather-night
      - "\U000F0F31" # weather-night-partly-cloudy
      - "\U000F0595" # weather-partly-cloudy
      - "\U000F0F32" # weather-partly-lightning
      - "\U000F0F33" # weather-partly-rainy
      - "\U000F0F34" # weather-partly-snowy
      - "\U000F0F35" # weather-partly-snowy-rainy
      - "\U000F0596" # weather-pouring
      - "\U000F0597" # weather-rainy
      - "\U000F0598" # weather-snowy
      - "\U000F0F36" # weather-snowy-heavy
      - "\U000F067F" # weather-snowy-rainy
      - "\U000F0599" # weather-sunny
      - "\U000F0F37" # weather-sunny-alert
      - "\U000F14E4" # weather-sunny-off
      - "\U000F059A" # weather-sunset
      - "\U000F059B" # weather-sunset-down
      - "\U000F059C" # weather-sunset-up
      - "\U000F0F38" # weather-tornado
      - "\U000F059D" # weather-windy
      - "\U000F059E" # weather-windy-variant

web_server:
  port: 80
  include_internal: true 

time:
  - platform: homeassistant
    id: ntp
    timezone: Europe/Lisbon
    on_time_sync:
      - then:
        - component.update: sunrise
        - component.update: sunset

sun:
  latitude: 50.0260°
  longitude: 14.2835°

external_components:
  - source:
      type: git
      url: https://github.com/vbaksa/esphome
      ref: dev
    components:
      #- lilygo_t5_47_battery
      - lilygo_t5_47_display
    refresh: 1h

sensor:
  - platform: wifi_signal
    id: wifisignal
    name: "WiFi Signal Sensor"
    update_interval: 60s

  - platform: homeassistant
    entity_id: sensor.sdm230m_import_active_energy
    id: sdm230_total_energy
    internal: true    
  
  - platform: homeassistant
    entity_id: sensor.xiaomi_cgg1_temperature
    id: xiaomi_cgg1_temperature
    internal: true 

  - platform: homeassistant
    entity_id: sensor.xiaomi_cgg1_humidity
    id: xiaomi_cgg1_humidity
    internal: true 

  - platform: homeassistant
    entity_id: sensor.aquarium_water_temperature
    id: aquarium_water_temperature
    internal: true 
  
  - platform: homeassistant
    entity_id: sensor.aquarium_room_temperature
    id: aquarium_room_temperature
    internal: true 

  - platform: homeassistant
    entity_id: sensor.fmb920_bat_ext_voltage
    id: fmb920_bat_ext_voltage
    internal: true 

  - platform: homeassistant
    entity_id: sensor.sdm230m_power
    id: sdm230m_power
    internal: true 

  - platform: homeassistant
    entity_id: sensor.speedtest_download
    id: speedtest_download
    internal: true 

  - platform: homeassistant
    entity_id: sensor.pi_hole_ads_percentage_blocked_today
    id: pi_hole_ads_percentage_blocked_today
    internal: true 

  - platform: homeassistant
    id: c_temp
    entity_id: weather.home_2
    attribute: temperature
    internal: yes

  - platform: homeassistant
    id: c_hum
    entity_id: weather.home_2
    attribute: humidity
    internal: yes

#  - platform: homeassistant
#    id: i_number
#    entity_id: input_number.display_image_frame
#    internal: yes
#    on_value: # Actions to perform once data for the last sensor has been received
#      then:
#        - lambda: |-
#            //ESP_LOGD("boot if", "i_number %f", id(i_number).state);


  - platform: homeassistant
    id: c_wind
    entity_id: weather.home_2
    attribute: wind_speed
    internal: yes
 #   on_value: # Actions to perform once data for the last sensor has been received
 #     then:
  #      - script.execute: add_image   

json:

text_sensor:
  - platform: sun
    id: sunrise
    name: Sun Next Sunrise
    type: sunrise
    format: "%H:%M"
    internal: true
    update_interval: never
  
  - platform: sun
    id: sunset
    name: Sun Next Sunset
    type: sunset
    format: "%H:%M"    
    internal: true
    update_interval: never
  
  #5 Day forecast
  - platform: homeassistant
    id: forecast_5
    entity_id: weather.home_3
    attribute: forecast
    internal: yes

  - platform: homeassistant
    id: c_state
    entity_id: weather.home_3
    internal: yes
    on_value:
      then:
        - script.execute: all_data_received


binary_sensor:
  - platform: gpio
    id: bin_gpio39
    pin: 
      number: GPIO39
      inverted: true
    name: "${esp_name} Button 1" 
    on_press:
      then:
        - deep_sleep.prevent: deep_sleep_1
  - platform: gpio
    id: bin_gpio34
    pin:
      number: GPIO34
      inverted: true
    name: "lilygo-t5 Button 2"
  - platform: gpio
    id: bin_gpio35
    pin:
      number: GPIO35
      inverted: true
    name: "lilygo-t5 Button 3"
script:

  - id: refresh_display
    then:
      - repeat:
          count: 1
          then:
          - display.page.show: black
          - component.update: t5_display
          - display.page.show: blank
          - component.update: t5_display

  - id: all_data_received
    then:
      - display.page.show: main1
      - component.update: t5_display
      #- script.execute: refresh_display
      - script.execute: enter_sleep     

  - id: enter_night_sleep
    then:
      - logger.log: "It's nighttime, entering night sleep for ${night_sleep_time}"     
      - deep_sleep.enter: 
          id: deep_sleep_1 
          sleep_duration: ${night_sleep_time}

  - id: enter_normal_sleep
    then:
      - if:
          condition:
            lambda: |- 
              return true; 
          then:
            - logger.log: "It's daytime and people are home, entering short sleep for ${sleep_time}"     
            - deep_sleep.enter: 
                id: deep_sleep_1 
                sleep_duration: ${sleep_time}
          else:
            - logger.log: "It's daytime but nobody's home, entering sleep for ${away_sleep_time}"     
            - deep_sleep.enter: 
                id: deep_sleep_1 
                sleep_duration: ${away_sleep_time}

  - id: enter_sleep
    then:
      - if:
          condition:
            lambda: |- 
              auto time = id(ntp).now();
              if (!time.is_valid()) { 
                return false;
              }
              return (time.hour < 6); 
          then:
            - script.execute: enter_night_sleep
          else:
            - script.execute: enter_normal_sleep
image:
  - file: "iris1.png"
    id: my_image
    resize: 960x540
    dither: FLOYDSTEINBERG
    type: GRAYSCALE
  - file: "iris2.png"
    id: my_image2
    resize: 960x540
    type: GRAYSCALE
    dither: FLOYDSTEINBERG
  - file: "iris3.png"
    id: my_image3
    resize: 960x540
    type: GRAYSCALE
    dither: FLOYDSTEINBERG
  - file: "iris4.png"
    id: my_image4
    resize: 960x540
    type: GRAYSCALE
    dither: FLOYDSTEINBERG

display:
  - platform: lilygo_t5_47_display
    power_off_delay_enabled: true  
    clear: true
    id: t5_display
    rotation: 0
    update_interval: 1min
    pages:
      - id: blank
        lambda: |-
          #define xres 960 
          #define yres 540        
          //draw clear background
          it.filled_rectangle(0, 0, xres, yres, COLOR_OFF);
          //it.print(xres/2, yres/2, id(font_name), COLOR_ON, TextAlign::CENTER, "Refreshing...");          
      - id: black
        lambda: |-
          #define xres 960 
          #define yres 540     
          //draw filled background
          it.filled_rectangle(0, 0, xres, yres, COLOR_ON);
          //it.print(xres/2, yres/2, id(font_name), COLOR_OFF, TextAlign::CENTER, "Refreshing...");
      - id: main1
        lambda: |-
          static RTC_DATA_ATTR int frameCounter = 0;
          static RTC_DATA_ATTR int galleryCounter = 0;
          static RTC_DATA_ATTR bool lockInGalleryisplay = 0;

          if (id(bin_gpio34).state) {
            ESP_LOGD("main", "LockButton %d", id(bin_gpio34).state);
            lockInGalleryisplay = !lockInGalleryisplay;
          } else {
            // Binary sensor is OFF, do something else here
          }

          esp_sleep_wakeup_cause_t wakeup_reason;
          wakeup_reason = esp_sleep_get_wakeup_cause();

          switch(wakeup_reason) {
            //let's update state of a sensor when wake up from RTC_IO
            case ESP_SLEEP_WAKEUP_EXT0: //return "Wakeup caused by external signal using RTC_IO"; 
              if (frameCounter < 1 ) {
                // global value is greater than 5
                frameCounter++;
                ESP_LOGD("boot", "Incrementing frameCounter");
              } else {
                frameCounter = 0;
              }
              ESP_LOGD("boot", "main() : %d" ,frameCounter);
              break;
            case ESP_SLEEP_WAKEUP_EXT1: //return "Wakeup caused by external signal using RTC_CNTL"; 
              break;
            case ESP_SLEEP_WAKEUP_TIMER: //return "Wakeup caused by timer";
              break;
            case ESP_SLEEP_WAKEUP_TOUCHPAD: //return "Wakeup caused by touchpad"; 
              break;
            case ESP_SLEEP_WAKEUP_ULP: //return "Wakeup caused by ULP program"; 
              break;
            default: //return "Wakeup was not caused by deep sleep"; 
              break;
          }

          ESP_LOGD("display", "main - i_number %d", frameCounter);
          #define xres 960 
          #define yres 540 
          #define x_pad 10 // border padding
          #define y_pad 10 // border padding      
          #define cat_pad 75 // padding before category
          #define val_pad 75 // padding before value
          #define icon_pad 30 //padding after icons 
          #define unit_pad 10 //padding between value and unit
          #define x1n 20 //x position 1st column name
          #define x1v xres*0.35 //x position 1st column value
          #define x1i 40 //x position 1st column icon
          #define x2n xres/2 //x position 2nd column name
          #define x2v xres*0.8 //x position 2nd column value
          #define x2i xres/2+20 //x position 1st column icon
          #define div_thickness 4

          //Map weather fonts//
          std::map<std::string, const char *> fonDict;
          fonDict["clear-night"] = "\U000F0594";
          fonDict["cloudy"] = "\U000F0590";
          fonDict["fog"] = "\U000F0591";
          fonDict["hail"] = "\U000F0592";
          fonDict["lightning"] = "\U000F0593";
          fonDict["lightning-rainy"] = "\U000F067E";
          fonDict["partlycloudy"] = "\U000F0595";
          fonDict["pouring"] = "\U000F0596";
          fonDict["rainy"] = "\U000F0597";
          fonDict["snowy"] = "\U000F0598";
          fonDict["snowy-rainy"] = "\U000F067F";
          fonDict["sunny"] = "\U000F0599";
          fonDict["windy"] = "\U000F059D";
          fonDict["windy-variant"] = "\U000F059E";
          fonDict["exceptional"] = "";

          //draw clear background (forces whole display to redraw)
          it.filled_rectangle(0, 0, xres, yres, COLOR_ON);
          it.filled_rectangle(1, 1, xres-1, yres-1, COLOR_OFF);
          int y = 0;
          
          if(lockInGalleryisplay == 0) {
            // Date
            it.strftime(xres/2, y_pad, id(font_name), TextAlign::TOP_CENTER, "%H:%M %d/%b/%Y", id(ntp).now());


            // Wi-Fi Signal 
            if (id(wifisignal).state > -20) {
              it.printf(30, y_pad, id(font_icons_50), TextAlign::TOP_LEFT , "\U000F0928"); // wifi-strength-4
            }
            else if (id(wifisignal).state > -40) {
                  it.printf(30, y_pad, id(font_icons_50), TextAlign::TOP_LEFT , "\U000F0925"); // wifi-strength-3
            } 
            else if (id(wifisignal).state > -60) {
                  it.printf(30, y_pad, id(font_icons_50), TextAlign::TOP_LEFT , "\U000F0922"); // wifi-strength-2
            }
            else if (id(wifisignal).state > -80) {
                  it.printf(30, y_pad, id(font_icons_50), TextAlign::TOP_LEFT , "\U000F091F"); // wifi-strength-1
            } else {      
                  it.printf(30, y_pad, id(font_icons_50), TextAlign::TOP_LEFT , "\U000F092F"); // wifi-strength-1
            }     
           
            //Divider
            it.filled_rectangle(30, 70, xres-2*30, div_thickness);
            it.filled_rectangle(30, 274, 418, div_thickness);
            it.filled_rectangle(478, 84, div_thickness, 426);
            it.filled_rectangle(160, 284, div_thickness, 216);
            it.filled_rectangle(314, 284, div_thickness, 216);


            //Icon condition
            it.printf(100, 164, id(weather_font_140), TextAlign::CENTER, "%s", fonDict[id(c_state).state.c_str()]);

            //Temp
            it.printf(212, 112, id(font_icons_50), TextAlign::CENTER,"\U000F050F"); // mdi-thermometer
            it.printf(340, 112, id(font_value), TextAlign::CENTER, "%.1f°C", id(c_temp).state );
            //Hum
            it.printf(212, 172, id(font_icons_50), TextAlign::CENTER,"\U000F058C"); // mdi-water
            it.printf(340, 172, id(font_value), TextAlign::CENTER, "%.1f%%", id(c_hum).state );
            //Wind
            it.printf(212, 232, id(font_icons_50), TextAlign::CENTER,"\U000F059D"); // mdi-weather-windy
            it.printf(340, 232, id(font_value), TextAlign::CENTER, "%.0fm/s", id(c_wind).state );

            int pos = 90;

            //Imported forecast json deserialization
            if (id(forecast_5).has_state()) {
              DynamicJsonDocument doc(8096);

              DeserializationError error = deserializeJson(doc, (id(forecast_5).state.c_str()));
              //JsonArray root = doc.as<JsonArray>();

              if (error) {
                //ESP_LOGD("custom", "deserializeJson() failed: %s", error.f_str());
              }

              //ESP_LOGD("custom", "The value of array is: %s", (id(forecast_5).state.c_str()));

              int i = 0;
              for (JsonObject item : doc.as<JsonArray>()) {
                const char* datetime = item["datetime"]; // "2022-05-12T00:00:00", "2022-05-13T00:00:00", ...
                const char* condition = item["condition"]; // "partlycloudy", "cloudy", "partlycloudy", "rainy", ...
                float templow = item["templow"]; // 16.4, 14.6, 17.5, 16.5, 16.5, 15.2, 14.8, 14.3, 14.6, 15.4
                float temperature = item["temperature"]; // 28.8, 29.9, 31.4, 22.8, 23.8, 24.8, 25.1, 25.7, 27.7, 29.6
                float precipitation = item["precipitation"]; // "0.0", "0.0", "1.0", ...
                float wind_speed = item["wind_speed"]; // "None", "None", "None", "None", "None", "None", "None", ...
                const char* wind_bearing = item["wind_bearing"]; // "NE", "W", "S", "SW", "SW", "SW", "NW", "N", "N", ...

                //Print to screen
                //Translated day
                //it.printf(50, 70, id(font_small), id(my_green), TextAlign::TOP_LEFT, "%s", dayDict_ext[forday]);

                //Icon condition
                it.printf(pos, 320, id(font_icons_90), TextAlign::CENTER, "%s", fonDict[condition]);
                it.printf(pos, 390, id(font_name_34), TextAlign::TOP_CENTER, "%.0f/%.0f°C", templow, temperature);
                it.printf(pos, 420, id(font_name_34), TextAlign::TOP_CENTER, "%.0f%mm", precipitation);
                it.printf(pos, 450, id(font_name_34), TextAlign::TOP_CENTER, "%.0fm/s", wind_speed);



                pos = pos + 150;
                i++;
                if (i >= 3) {
                  break;
                }
              }         
            }



            //"\U000F0099" #mdi-bed-outline
            it.printf(520, 112, id(font_icons_small), TextAlign::CENTER, "\U000F0099"); // mdi-bed-double-outline
            it.printf(721, 112, id(font_value), TextAlign::CENTER, "%.1f°C", id(xiaomi_cgg1_temperature).state);      
            //"\U000F156D" # mdi-sofa-outline
            it.printf(520, 172, id(font_icons_small), TextAlign::CENTER, "\U000F156D"); // mdi-sofa-outline
            it.printf(721, 172, id(font_value), TextAlign::CENTER, "%.1f°C", id(aquarium_room_temperature).state);
            //- "\U000F0EF4" # mdi-fishbowl-outline
            it.printf(520, 232, id(font_icons_small), TextAlign::CENTER, "\U000F0EF4"); // mdi-fishbowl-outline
            it.printf(721, 232, id(font_value), TextAlign::CENTER, "%.1f°C", id(aquarium_water_temperature).state);
            // - "\U000F00A3" # mdi-bike // fmb920_bat_ext_voltage
            it.printf(520, 292, id(font_icons_small), TextAlign::CENTER, "\U000F00A3"); // mdi-bike 
            it.printf(721, 292, id(font_value), TextAlign::CENTER, "%.2fV", id(fmb920_bat_ext_voltage).state);
            // - "\U000F140B" # Energy // sdm230m_power
            it.printf(520, 352, id(font_icons_small), TextAlign::CENTER, "\U000F140B"); // mdi-energy 
            it.printf(721, 352, id(font_value), TextAlign::CENTER, "%.2fW", id(sdm230m_power).state);
            //- "\U000F0B7D" # mdi-cloud-download-outline
            it.printf(520, 412, id(font_icons_small), TextAlign::CENTER, "\U000F0B7D"); // di-cloud-download-outline
            it.printf(721, 412, id(font_value), TextAlign::CENTER, "%.0fMbs", id(speedtest_download).state);
            //- "\U000F0DF1" # mdi-pi-hole // sensor.pi_hole_ads_percentage_blocked_today
            it.printf(520, 472, id(font_icons_small), TextAlign::CENTER, "\U000F0DF1"); // di-cloud-download-outline
            it.printf(721, 472, id(font_value), TextAlign::CENTER, "%.2f%%", id(pi_hole_ads_percentage_blocked_today).state);
          } 
          //
          // ART GALLERY
          //
          else {
            galleryCounter++;

            if (galleryCounter > 3) {
              galleryCounter = 0;
            }

            switch(galleryCounter) {
              case 0:
                it.image(0, 0, id(my_image));
                break;
              case 1:
                it.image(0, 0, id(my_image2));
                break;
              case 2:
                it.image(0, 0, id(my_image3));
                break;
              case 3:
                it.image(0, 0, id(my_image4));
                break;
              default:
                it.image(0, 0, id(my_image));
                break;
            }
          }